apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.label }}
  template:
    metadata:
      labels:
        app: {{ .Values.deployment.label }}
    spec:
      initContainers:
        - name: {{ .Values.deployment.initContainer.name }}
          image: {{ .Values.deployment.initContainer.image }}
          command: ["sh", "-c", {{ printf "until nslookup %s-kafka; do echo waiting for kafka; sleep 2; done;" .Release.Name | quote }} ]
      containers:
        - name: {{ .Values.deployment.container.name }}
          image: {{ .Values.deployment.image.repo }}:{{ .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          ports:
            - name: {{ .Values.deployment.container.portName }}
              containerPort: {{ .Values.deployment.container.port }}
          env:
            - name: billing_app_url_withdraw
              valueFrom:
                secretKeyRef:
                  name: order-app-secrets
                  key: billing_app_url_withdraw
            - name: spring_kafka_bootstrap_server
              valueFrom:
                secretKeyRef:
                  name: kafka-secrets
                  key: spring_kafka_bootstrap_server
            - name: spring_kafka_producer_client_id
              valueFrom:
                secretKeyRef:
                  name: kafka-secrets
                  key: spring_kafka_producer_client_id
            - name: spring_kafka_consumer_group_id
              valueFrom:
                secretKeyRef:
                  name: kafka-secrets
                  key: spring_kafka_consumer_group_id
            - name: kafka_notification_topic_name
              valueFrom:
                secretKeyRef:
                  name: kafka-secrets
                  key: kafka_notification_topic_name
          livenessProbe:
            httpGet:
              port: {{ .Values.deployment.container.port }}
              path: /info/health
            initialDelaySeconds: {{ .Values.deployment.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.liveness.timeoutSeconds }}
          readinessProbe:
            httpGet:
              port: {{ .Values.deployment.container.port }}
              path: /info/status
            initialDelaySeconds: {{ .Values.deployment.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readiness.periodSeconds }}
